import unittest
import curves
from numpy.testing import assert_allclose


class CurvesTestCase(unittest.TestCase):
    def test_logistic_1(self):
        targets = [0.500055527559194, 0.500074951129150, 0.500101167546605, 0.500136551163513, 0.500184305224244, 0.500248750386616, 0.500335712975227, 0.500453046869039, 0.500611333977693, 0.500824822524122, 0.501112680420486, 0.501500663288336, 0.502023322922424, 0.502726910671213, 0.503673157018922, 0.504944124183767, 0.506648314261973, 0.508928137580335, 0.511968647109590, 0.516007035172686, 0.521341642929905, 0.528338010225648, 0.537427713422265, 0.549093569538026, 0.563832979205220, 0.582091485712860, 0.604163847425442, 0.630072723818748, 0.659454662198392, 0.691500867434754, 0.725000000000000, 0.758499132565247, 0.790545337801608, 0.819927276181252, 0.845836152574558, 0.867908514287140, 0.886167020794781, 0.900906430461974, 0.912572286577735, 0.921661989774352, 0.928658357070095]
        inputs = [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
        alpha = 20
        beta = 0.3
        gamma = 0.5
        lamb = 0.05
        function = lambda x: curves.logistic(x, alpha, beta, gamma, lamb)
        outputs = list(map(function, inputs))
        assert_allclose(outputs, targets, rtol=0, atol=1e-10)
        
    def test_logistic_2(self):
        targets = [0.738876275722737, 0.739284370576581, 0.739692497166582, 0.740100653228817, 0.740508836498710, 0.740917044711082, 0.741325275600196, 0.741733526899816, 0.742141796343249, 0.742550081663400, 0.742958380592823, 0.743366690863767, 0.743775010208231, 0.744183336358011, 0.744591667044753, 0.745000000000000, 0.745408332955247, 0.745816663641989, 0.746224989791769, 0.746633309136233, 0.747041619407177, 0.747449918336600, 0.747858203656752, 0.748266473100185, 0.748674724399804, 0.749082955288918, 0.749491163501290, 0.749899346771183, 0.750307502833418, 0.750715629423419, 0.751123724277263]
        inputs = [5, 5.33333333333333, 5.66666666666667, 6, 6.33333333333333, 6.66666666666667, 7, 7.33333333333333, 7.66666666666667, 8, 8.33333333333333, 8.66666666666667, 9, 9.33333333333333, 9.66666666666667, 10, 10.3333333333333, 10.6666666666667, 11, 11.3333333333333, 11.6666666666667, 12, 12.3333333333333, 12.6666666666667, 13, 13.3333333333333, 13.6666666666667, 14, 14.3333333333333, 14.6666666666667, 15]
        alpha = 10
        beta = 0.01
        gamma= 0.5
        lamb = 0.01
        function = lambda x: curves.logistic(x, alpha, beta, gamma, lamb)
        outputs = list(map(function, inputs))
        assert_allclose(outputs, targets, rtol=0, atol=1e-10)

    def test_weibull_1(self):
        inputs = [0, 0.125000000000000, 0.250000000000000, 0.375000000000000, 0.500000000000000, 0.625000000000000, 0.750000000000000, 0.875000000000000, 1, 1.12500000000000, 1.25000000000000, 1.37500000000000, 1.50000000000000, 1.62500000000000, 1.75000000000000, 1.87500000000000, 2, 2.12500000000000, 2.25000000000000, 2.37500000000000, 2.50000000000000, 2.62500000000000, 2.75000000000000, 2.87500000000000, 3, 3.12500000000000, 3.25000000000000, 3.37500000000000, 3.50000000000000, 3.62500000000000, 3.75000000000000, 3.87500000000000, 4, 4.12500000000000, 4.25000000000000, 4.37500000000000, 4.50000000000000, 4.62500000000000, 4.75000000000000, 4.87500000000000, 5]
        targets = [0.500000000000000, 0.599539647617868, 0.677061203129315, 0.737435051266543, 0.784454251472851, 0.821072841412915, 0.849591427933207, 0.871801725447300, 0.889099122543524, 0.902570348947161, 0.913061750619246, 0.921232462456982, 0.927595819234461, 0.932551606475725, 0.936411177459957, 0.939417014364796, 0.941757962500070, 0.943581094740950, 0.945000951557791, 0.946106737158596, 0.946967923850412, 0.947638616720368, 0.948160952852691, 0.948567748641571, 0.948884561520500, 0.949131295638698, 0.949323452363160, 0.949473104170644, 0.949589653115501, 0.949680421525021, 0.949751112033433, 0.949806165856741, 0.949849041817444, 0.949882433649214, 0.949908439233945, 0.949928692403698, 0.949944465588161, 0.949956749756572, 0.949966316676551, 0.949973767401321, 0.949979570031607]
        alpha = 0.5
        beta = 1
        gamma = 0.5
        lamb=0.05
        function = lambda x: curves.weibull(x, alpha, beta, gamma, lamb)
        outputs = list(map(function, inputs))
        assert_allclose(outputs, targets, rtol=0, atol=1e-10)

    def test_weibull_2(self):
        targets = [0.500000000000000, 0.501223470025245, 0.504875581462908, 0.510901893775265, 0.519213174815362, 0.529687599221397, 0.542173719217098, 0.556494106577693, 0.572449543406556, 0.589823623526926, 0.608387616295012, 0.627905440753117, 0.648138600225195, 0.668850935379848, 0.689813066849636, 0.710806415881848, 0.731626712218906, 0.752086921374501, 0.772019547550759, 0.791278292518973, 0.809739073825993, 0.827300426781116, 0.843883333079355, 0.859430534071373, 0.873905398245760, 0.887290420295962, 0.899585433243435, 0.910805615691984, 0.920979373748688, 0.930146171925405, 0.938354379964687, 0.945659193584789, 0.952120677182783, 0.957801966118524, 0.962767655820373, 0.967082395031860, 0.970809691401496, 0.974010929563481, 0.976744595035488, 0.979065691759286, 0.981025336944520]
        inputs = [0, 0.500000000000000, 1, 1.50000000000000, 2, 2.50000000000000, 3, 3.50000000000000, 4, 4.50000000000000, 5, 5.50000000000000, 6, 6.50000000000000, 7, 7.50000000000000, 8, 8.50000000000000, 9, 9.50000000000000, 10, 10.5000000000000, 11, 11.5000000000000, 12, 12.5000000000000, 13, 13.5000000000000, 14, 14.5000000000000, 15, 15.5000000000000, 16, 16.5000000000000, 17, 17.5000000000000, 18, 18.5000000000000, 19, 19.5000000000000, 20]
        alpha = 10
        beta = 2
        gamma = 0.5
        lamb=0.01
        function = lambda x: curves.weibull(x, alpha, beta, gamma, lamb)
        outputs = list(map(function, inputs))
        assert_allclose(outputs, targets, rtol=0, atol=1e-10)

    def test_gaussian_1(self):
        inputs = [-10, -9.50000000000000, -9, -8.50000000000000, -8, -7.50000000000000, -7, -6.50000000000000, -6, -5.50000000000000, -5, -4.50000000000000, -4, -3.50000000000000, -3, -2.50000000000000, -2, -1.50000000000000, -1, -0.500000000000000, 0, 0.500000000000000, 1, 1.50000000000000, 2, 2.50000000000000, 3, 3.50000000000000, 4, 4.50000000000000, 5, 5.50000000000000, 6, 6.50000000000000, 7, 7.50000000000000, 8, 8.50000000000000, 9, 9.50000000000000, 10]
        targets = [0.502794349396599, 0.503948513793082, 0.505501012694770, 0.507556987901802, 0.510237559376681, 0.513678362794368, 0.518026620588718, 0.523436575736849, 0.530063240570986, 0.538054575058101, 0.547542398150085, 0.558632532711564, 0.571394864269156, 0.585854128783630, 0.601982308569591, 0.619693488071915, 0.638841892426694, 0.659223604997274, 0.680582153442684, 0.702617798826449, 0.725000000000000, 0.747382201173551, 0.769417846557316, 0.790776395002726, 0.811158107573306, 0.830306511928085, 0.848017691430409, 0.864145871216370, 0.878605135730844, 0.891367467288436, 0.902457601849915, 0.911945424941899, 0.919936759429014, 0.926563424263151, 0.931973379411282, 0.936321637205632, 0.939762440623319, 0.942443012098198, 0.944498987305230, 0.946051486206918, 0.947205650603401]
        alpha = 0
        beta = 4
        gamma = 0.5
        lamb = 0.05
        function = lambda x: curves.gaussian(x, alpha, beta, gamma, lamb)
        outputs = list(map(function, inputs))
        assert_allclose(outputs, targets, rtol=0, atol=1e-10)


if __name__ == '__main__':
    unittest.main()
